0. default component:
- app.component.ts
- app.component.html
- app.component.css

0. show data from ts to html:
- ts: title= 'cafe shop';
- html: <h1>{{title}}</h1>
the double curly braces are angular's interpolation binding syntax

1. ng generate component asdfg
- ts: title='titulo';
- html: {{title}}
- other component: <app-asdfg></app-asdfg>

1. create a class:
- src/app/cafe.ts
export class Cafe {
	id: number;
	name: string;
}
- src/app/cafes/cafes.component.ts
import { Cafe } from '../cafe';
export class CafesComponent implements OnInit {
	cafe: Cafe = {
		id: 1,
		name: 'negro'
	};
	constructor() {}
	ngOnInit() {}
}
- cafes.component.html
{{cafe.name | uppercase}}

1. two-way binding
- cafes.component.html
<input [(ngModel)]="cafe.name">
- app.module.ts
import { FormsModule } from '@angular/forms';
imports:[ FormsModule ],

2. mock-cafe.ts
import { Cafe } from './cafe';
export const CAFES: Cafe[] = [
	{ id: 1, name: 'negro' },
	{ id: 2, name: 'conleche' }
];
- cafes.component.ts
import { CAFES } from '../mock-cafes';
export class CafesComponent implements OnInit {
	cafes = CAFES;
}
- cafes.component.html
<li *ngFor="let cafe of cafes">
{{cafe.id}} {{cafe.name}} </li>

2. click event binding
- cafes.component.html
<li *ngFor='let cafe of cafes' (click)='onSelect(cafe)'>
- cafes.component.ts
selectedCafe: Cafe;
onSelect(cafe: Cafe): void {
	this.selectedCafe = cafe;
}
- cafes.component.html
<div *ngIf='selectedCafe'>
	{{selectedCafe.name}}
	<input [(ngModel)]='seletedCafe.name'>
</div>

2. class binding
- cafes.component.html
[class.selected]='cafe === selectedCafe'

3. master/detail component
ng generate component cafe-detail
- cafe-detail.component.html
<div *ngIf='cafe'>
...
</div>
- cafe-detail.component.ts
import { Cafe } from './cafe';
- cafes.component.html
<app-cafe-detail [cafe]='selectedCafe'></app-cafe-detail>
- cafe-detail.component.ts
import { Input } from '@angular/core';
@Input() cafe: Cafe; //receive the cafe object from the master

4. service (sincronico)
ng generate service cafe
import { Cafe } from './cafe';
import { CAFES } FROM './mock-cafes';
getCafes(): Cafe[] {
	return CAFES;
}
- cafes.component.ts
import { CafeService } from '../cafe.service';
cafes: Cafe[];
constructor(private cafeService: CafeService) {} //singleton instance
getCafes(): void {
	this.cafes = this.cafeService.getCafes(); //sincronico
}
ngOnInit () {
	this.getCafes();
}

4. observables
- cafe.service.ts
import { Observable, of } from 'rxjs';
getCafes(): Observable<Cafe[]> {
	return of (CAFES);
}
- cafes.component.ts
getCafes(): void {
	this.cafeService.getCafes()
		.subscribe(cafes => this.cafes = cafes);
}

4. service-in-service scenario: you inject the MessageService into the CafeService wich is injected into the CafeComponent

5. routing
ng generate module app-routing --flat --module=app
- src/app/app-routing.module.ts
import { RouterModule, Routes } from '@angular/router';
import { CafesComponent } from './cafes/cafes.component';
const routes: Routes = [
	{ path: 'cafes', component: CafesComponent },
];
@NgModule({
	imports: [RouterModule.forRoot(routes)],
	exports: [RouterModule]
})
export class AppRoutingModule {}
- app.component.html
<router-outlet></router-outlet>
//replace the <app-cafes>
//the <router-outlet> tells the router where to display routed views

5. navigation menu
- src/app/app.component.html
<nav><a routerLink="/cafes">cafes</a></nav>
<router-outlet></router-outlet>

5. default route
src/app/app-routing.module.ts
{ path: '', redirectTo: '/asdf', pathMatch: 'full' },

5. cafe list refactoring for delete button
<li *ngFor="let cafe of cafes">
	<a routerLink="/detail/{{cafe.id}}">
		{{cafe.name}}
	</a>
</li>

5. routable CafeDetailComponent
- cafe-detail.component.ts
import { ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { CafeService } from '../cafe.service';
constructor(
	private route: ActivatedRoute,
	private cafeService: CafeService,
	private location: Location
) {}
ngOnInit(): void {
	this.getCafe();
}
getCafe(): void {
	const id = +this.route.snapshot.paramMap.get('id');
	this.cafeService.getCafe(id)
		.subscribe(cafe => this.cafe = cafe);
}
- cafe.service.ts
getCafe(id: number): Observable<Cafe> {
	//TODO: send the message _after_ fetching the cafe
	this.messageService.add(`servicio de cafe: cafe encontrado id=${id}`);
	return of (CAFES.find(cafe => cafe.id === id));
}

5. go back button
- cafe-detail.component.html
<button (click)="goBack()">retroceder</button>
- cafe-detail.component.ts
goBack(): void {
	this.location.back();
}

6. enable http services
src/app/app.module.ts
import { HttpClientModule } from '@angular/common/http';
imports: [ HttpClientModule, ],

6. simulate a data server with the in-memory web api module
npm install angular-in-memory-web-api --save
- app.module.ts
import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';
import { InMemoryDataService } from './in-memory-data.service';
imports: [ 
	HttpClientModule,
	// the next module intercepts http requests and returns simulated responses
	// remove it when a real server is ready to receive requests
	HttpClientInMemoryWebApiModule.forRoot(InMemoryDataService, { dataEncapsulation: false })
]
- ng generate service InMemoryData
- src/app/in-memory-data.service.ts
import { InMemoryDbService } from 'angular-in-memory-web-api';
import { Cafe } from './cafe';
import { Injectable } from '@angular/core';
@Injectable({ providedIn: 'root', })
export class InMemoryDataService implements InMemoryDbService {
	createDb() {
		cons cafes = [
			{ id: 1, name: 'negro' },
			{ id: 2, name: 'conleche' },
		];
		return {cafes};
	}
	// Overrides the genId method to ensure that a cafe always has an id.
	// If the cafes array is empty,
	// the method below returns the initial number (1).
	// if the cafes array is not empty, the method below returns the highest
	// cafe id + 1.
	genId(cafes: Cafe[]): number {
	return cafes.length > 0 ? Math.max(...cafes.map(cafe => cafe.id)) + 1 : 1;
	}
}

6. cafe.service.ts
import { HttpClient, HttpHeaders } from '@angular/common/http';
constructor(
	private http: HttpClient,
	private messageService: MessageService ) {}
- //notice that you keep injecting the MessageService but since you'll call it so frequently, wrap it in a private log() method:
private log(message: string) {
	this.messageService.add(`servicio de cafe: ${message}`);
}
//fake api server url
private cafesUrl = 'api/cafes'; //url to web api
- //get cafes with HttpClient
getCafes(): Observable<Cafe[]> {
	return this.http.get<Cafe[]>(this.cafesUrl)
}

6. HttpClient.get()
- it will only return a single value, but could be an array
- returns the body of the response as an untyped JSON object by default, but applying the optional type specifier <cafe[]> gives you a typed result object
- other APIs may bury the data that you want within an object, you might have to dig that data out by processing the Observable result with the RxJSmap() operator

6. error handling
- cafe.service.ts
import { catchError, map, tap } from 'rxjs/operators';
getCafes(): Observable<Cafe[]> {
	return this.http.get<Cafe[]>(this.cafesUrl)
		.pipe(
			catchError(this.handleError<Cafe[]>('getCafes', []))
		);
}
//the catchError operator intercepts an Observable THAT FAILED, it passes to the error an "error handler" function that can do something
/**
 * Handle Http operation that failed.
 * Let the app continue.
 * @param operation - name of the operation that failed
 * @param result - optional value to return as the observable result
 */
private handleError<T> (operation = 'operation', result?: T) {
  return (error: any): Observable<T> => {
    // TODO: send the error to remote logging infrastructure
    console.error(error); // log to console instead
    // TODO: better job of transforming error for user consumption
    this.log(`${operation} failed: ${error.message}`);
    // Let the app keep running by returning an empty result.
    return of(result as T);
  };
}

6. tap into the Observable (insert extra info)
- cafe.service.ts
/** GET cafes from the server */
getCafes (): Observable<Cafe[]> {
  return this.http.get<Cafe[]>(this.cafesUrl)
    .pipe(
      tap(_ => this.log('fetched cafes')),
      catchError(this.handleError<Cafe[]>('getCafes', []))
    );
}

6. get cafe by id from the fake api
- cafe.service.ts
/** GET cafe by id. Will 404 if id not found */
getCafe(id: number): Observable<Cafe> {
  const url = `${this.cafesUrl}/${id}`;
  return this.http.get<Cafe>(url).pipe(
    tap(_ => this.log(`fetched cafe id=${id}`)),
    catchError(this.handleError<Cafe>(`getCafe id=${id}`))
  );
}

6. update cafes
- cafe-detail.component.html
<button (click)='save()'>guardar</button>
- cafe-detail.component.ts
save(): void {
	this.cafeService.updateCafe(this.cafe)
		.subscribe(() => this.goBack());
}
- cafe.service.ts
/** PUT: update the cafe on the server */
updateCafe (cafe: Cafe): Observable<any> {
  return this.http.put(this.cafesUrl, cafe, this.httpOptions).pipe(
    tap(_ => this.log(`updated cafe id=${cafe.id}`)),
    catchError(this.handleError<any>('updateCafe'))
  );
}
httpOptions = {
	headers: new HttpHeaders({ 'Content-Type': 'application/json' })
};

6. add a new cafe
- cafes.component.html
<div>
  <label>nombre del nuevo cafe:
    <input #cafeName />
  </label>
  <!-- (click) passes input value to add() and then clears the input -->
  <button (click)="add(cafeName.value); cafeName.value=''">agregar</button>
</div>
- cafes.component.ts
add(name: string): void {
  name = name.trim();
  if (!name) { return; }
  this.cafeService.addCafe({ name } as Cafe)
    .subscribe(cafe => {
      this.cafes.push(cafe);
    });
}
- cafe.service.ts
/** POST: add a new cafe to the server */
addCafe (cafe: Cafe): Observable<Cafe> {
  return this.http.post<Cafe>(this.cafesUrl, cafe, this.httpOptions)
  	.pipe(tap((newCafe: Cafe) => this.log(`cafe agregado id=${newCafe.id}`)),
    catchError(this.handleError<Cafe>('addCafe'))
  );
} //addCafe() differs from updateCafe() in two ways:
    //It calls HttpClient.post() instead of put().
    //It expects the server to generate an id for the new cafe, which it returns in the Observable<Cafe> to the caller.

6. delete a cafe
- cafes.component.html
<ul class="cafes">
  <li *ngFor="let cafe of cafes">
    <a routerLink="/detail/{{cafe.id}}">
      <span class="badge">{{cafe.id}}</span> {{cafe.name}}
    </a>
    <button class="delete" title="delete cafe"
      (click)="delete(cafe)">x</button>
  </li>
</ul>
- cafes.component.ts
delete(cafe: Cafe): void {
	this.cafes = this.cafes.filter(h => h !== cafe);
	this.cafeService.deleteCafe(cafe).subscribe();
}
// If you neglect to subscribe(), the service will not send the delete request to the server. As a rule, an Observable does nothing until something subscribes.
- cafe.service.ts
/** DELETE: delete the cafe from the server */
deleteCafe (cafe: Cafe | number): Observable<Cafe> {
  const id = typeof cafe === 'number' ? cafe : cafe.id;
  const url = `${this.cafesUrl}/${id}`;

  return this.http.delete<Cafe>(url, this.httpOptions).pipe(
    tap(_ => this.log(`cafe borrado id=${id}`)),
    catchError(this.handleError<Cafe>('deleteCafe'))
  );
}

6. search by name
- cafe.service.ts
/* GET cafes whose name contains search term */
searchCafes(term: string): Observable<Cafe[]> {
  if (!term.trim()) {
    // if not search term, return empty cafe array.
    return of([]);
  }
  return this.http.get<Cafe[]>(`${this.cafesUrl}/?name=${term}`)
  	.pipe(
  		tap(_ => this.log(`cafes encontrados por "${term}"`)),
    catchError(this.handleError<Cafe[]>('searchCafes', []))
  );
}
- dashboard.component.html
<h3>el top de los cafeses</h3>
<div class="grid grid-pad">
  <a *ngFor="let cafe of cafes" class="col-1-4"
      routerLink="/detail/{{cafe.id}}">
    <div class="module cafe">
      <h4>{{cafe.name}}</h4>
    </div>
  </a>
</div>
<app-cafe-search></app-cafe-search>
- ng generate component cafe-search
- cafe-search.component.html
<div id="search-component">
  <h4><label for="search-box">buscar cafe</label></h4>
  <input #searchBox id="search-box" (input)="search(searchBox.value)" />
  <ul class="search-result">
    <li *ngFor="let cafe of cafes$ | async" >
      <a routerLink="/detail/{{cafe.id}}">
        {{cafe.name}}
      </a>
    </li>
  </ul>
</div>
//The $ is a convention that indicates cafes$ is an Observable, not an array
//Since *ngFor can't do anything with an Observable, use the pipe character (|) followed by async. This identifies Angular's AsyncPipe and subscribes to an Observable automatically so you won't have to do so in the component class.
- cafe-search.component.ts
import { Observable, Subject } from 'rxjs';
import {
   debounceTime, distinctUntilChanged, switchMap
 } from 'rxjs/operators';
import { Cafe } from '../cafe';
import { CafeService } from '../cafe.service';
export class CafeSearchComponent implements OnInit {
  cafes$: Observable<Cafe[]>;
  private searchTerms = new Subject<string>();
  constructor(private cafeService: CafeService) {}
  // Push a search term into the observable stream.
  search(term: string): void {
    this.searchTerms.next(term);
  }
  ngOnInit(): void {
    this.cafes$ = this.searchTerms.pipe(
      // wait 300ms after each keystroke before considering the term
      debounceTime(300),
      // ignore new term if same as previous term
      distinctUntilChanged(),
      // switch to new search observable (and discard old) each time the term changes
      switchMap((term: string) => this.cafeService.searchCafes(term)),
    );
  }
}
